% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chars_funs.R
\name{chars_sparsify}
\alias{chars_sparsify}
\title{Convert ADDCHARS SQL data to a sparse format that can be joined to other data}
\usage{
chars_sparsify(
  data,
  pin_col,
  year_col,
  town_col,
  upload_date_col,
  additive_source,
  replacement_source
)
}
\arguments{
\item{data}{A data frame containing ADDCHARS columns.}

\item{pin_col}{A column name specifying the PIN column.}

\item{year_col}{A column name specifying the year column.}

\item{town_col}{A column name specifying the town column. This is used to
determine the length of the 288, given the starting date specified
by \code{year_col}.}

\item{upload_date_col}{A column name specifying the upload date of the 288,
this is use to determine which replacement characteristics take precedence
if multiple 288s were filed in the same year (the latest one is chosen).}

\item{additive_source}{A tidyselect selection of columns which contains
additive characteristic values. These are values such as square feet which
get ADDED to existing characteristics. For example, if qu_sqft_bld is equal
to 100, then 100 sqft get added to the existing square footage of the
property. The easiest way to specify all additive columns is to use the
built-in crosswalk, \code{any_of(ccao::chars_cols$add$source)}.}

\item{replacement_source}{A tidyselect selection of columns which contains
replacement characteristic values. These are values such as number of rooms
which get OVERWRITE existing characteristics. For example, if QU_ROOMS is
equal to 3, then the property will be update to have 3 total rooms.
The easiest way to specify all replacement columns is to use the
built-in crosswalk, \code{any_of(ccao::chars_cols$replace$source)}.}
}
\value{
A sparsified data frame of characteristic updates per PIN per year.
See example.
}
\description{
The ADDCHARS SQL table includes individual rows listing the PIN,
start date, and characteristic updates associated with a 288 Home Improvement
Exemption. This data format is difficult to work with and complicated by the
fact that multiple 288s can be active at the same time for different periods,
and some columns from ADDCHARS add to existing characteristics, while some
overwrite existing characteristics. Additionally, 288s can be active for
multi-code properties, meaning that one building on a PIN could have an
improvement while the others remain untouched.

The goal of this function is to transform these single row records into a
sparse data frame which lists a row and characteristic update per PIN
per YEAR.

The transformation caused by this function is most easily visualized
with a mock dataset.

The base ADDCHARS data looks like this:\tabular{llllll}{
   qu_pin \tab year \tab qu_town \tab qu_upload_date \tab qu_sqft_bld \tab qu_rooms \cr
   12345 \tab 2013 \tab 77 \tab 130702 \tab 200 \tab 0 \cr
   12345 \tab 2015 \tab 77 \tab 150703 \tab 300 \tab 1 \cr
}


This function will transform it into this:\tabular{llll}{
   qu_pin \tab year \tab qu_sqft_bld \tab qu_rooms \cr
   12345 \tab 2013 \tab 200 \tab 0 \cr
   12345 \tab 2014 \tab 200 \tab 0 \cr
   12345 \tab 2015 \tab 500 \tab 1 \cr
   12345 \tab 2016 \tab 500 \tab 1 \cr
   12345 \tab 2017 \tab 500 \tab 1 \cr
   12345 \tab 2018 \tab 300 \tab 1 \cr
   12345 \tab 2019 \tab 300 \tab 1 \cr
   12345 \tab 2020 \tab 300 \tab 1 \cr
}


Each PIN will have a row for each year that a 288 is active and a column
for each characteristic specified by \code{additive_source} and
\code{replacement_source}. This table can be easily left joined to modeling
data to update characteristic values.
}
\note{
Use dplyr/tidyselect syntax for specifying column names. For example,
use \code{qu_sqft_bld} instead of \code{"qu_sqft_bld"}, or use a tidyselect
function such as \code{starts_with("qu_")}.
}
\examples{

# Load the included example dataset
data("chars_sample_hie")

chars_sparsify(
  chars_sample_hie[1:3, ],
  pin_col = pin,
  year_col = year,
  town_col = as.character(qu_town),
  upload_date_col = qu_upload_date,
  additive_source = any_of(chars_cols$add$source),
  replacement_source = any_of(chars_cols$replace$source)
)
}
\seealso{
Other chars_funs: 
\code{\link{chars_288_active}()},
\code{\link{chars_fix_age}()},
\code{\link{chars_update}()}
}
\concept{chars_funs}
